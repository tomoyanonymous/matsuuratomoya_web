<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Matsuura Tomoya</title>
    <link>https://matsuuratomoya.com/blog/</link>
    <description>Recent content in Blogs on Matsuura Tomoya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://matsuuratomoya.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Faustで出来る限り簡単にwavファイルにエフェクトを掛ける</title>
      <link>https://matsuuratomoya.com/blog/2017-09-06/faust_sndfile/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2017-09-06/faust_sndfile/</guid>
      <description>&lt;p&gt;今回は最近追加されたFaustで書いたエフェクトをwavファイルに対して掛ける方法を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Faustのライブラリの使い方と標準ライブラリのオススメ</title>
      <link>https://matsuuratomoya.com/blog/2017-01-19/faust_library/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2017-01-19/faust_library/</guid>
      <description>&lt;p&gt;&lt;em&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/faust&#34;&gt;Faust(多分ひとり)Advent Calender&lt;/a&gt;の5つ目の記事です。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本日はFaustの外部ソースの取り込み方の説明と、標準でついてくるライブラリの中から使える関数を幾つか紹介しようと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Faustの基本文法解説</title>
      <link>https://matsuuratomoya.com/blog/2017-01-07/faust_grammer/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2017-01-07/faust_grammer/</guid>
      <description>&lt;p&gt;&lt;em&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/faust&#34;&gt;Faust(多分ひとり)Advent Calender&lt;/a&gt;の4つ目の記事です。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;年が明けてますがアドベントカレンダーです。
本日はなんとも独特なFaustの記法について解説していきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Faustのコンパイラのビルドとインストール時の注意点</title>
      <link>https://matsuuratomoya.com/blog/2016-12-11/faust_build_compiler/</link>
      <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-12-11/faust_build_compiler/</guid>
      <description>&lt;p&gt;&lt;em&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/faust&#34;&gt;Faust(多分ひとり)Advent Calender&lt;/a&gt;の3つ目の記事です。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本日はFaustのコンパイラをビルドする時、インストールする時の注意点について書こうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>とりあえずFaustを始めたい人のための4つの環境</title>
      <link>https://matsuuratomoya.com/blog/2016-12-04/faust_start/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-12-04/faust_start/</guid>
      <description>&lt;p&gt;&lt;em&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/faust&#34;&gt;Faust(多分ひとり)Advent Calender&lt;/a&gt;の2個めの記事です。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;今回は「なんでもいいからとりあえずFaust触ってみたいんだけど」という人のための開発環境について書こうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>音声処理プログラミング言語、Faustの紹介</title>
      <link>https://matsuuratomoya.com/blog/2016-12-01/faust_introduction/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-12-01/faust_introduction/</guid>
      <description>&lt;p&gt;&lt;em&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/faust&#34;&gt;Faust(多分ひとり)Advent Calender&lt;/a&gt;の1日目の記事です。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;さて、やろうと思っていて中々出来てなかった&lt;a href=&#34;http://faust.grame.fr&#34;&gt;Faust&lt;/a&gt;の紹介ですが、この際Advent Calenderでまとめて紹介して行こうと思います。
今回はFaustの全体的な紹介です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>簡単なマルチチャンネルパンナー、DBAPの実装</title>
      <link>https://matsuuratomoya.com/blog/2016-06-17/dbap-implementation/</link>
      <pubDate>Fri, 17 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-06-17/dbap-implementation/</guid>
      <description>&lt;p&gt;MaxやPuredataを使う理由のうちにマルチチャンネルの制御がしたいということがある人は少なく無いと思います。&lt;/p&gt;

&lt;p&gt;一般的な5.1chの実装はVBAPというアルゴリズムで実装されていますが、聴取位置からスピーカーが等距離でないといけなかったり、結構制限が多くて大変です。
そこでもう少しユルいアルゴリズムであるDBAPというのを使ってみようという話です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JitterとGenを活用してインパルス応答測定(1)</title>
      <link>https://matsuuratomoya.com/blog/2016-06-11/log_sinesweep_jitter_gen/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-06-11/log_sinesweep_jitter_gen/</guid>
      <description>&lt;p&gt;皆さん、インパルス応答は好きですか？僕は大好きです。&lt;/p&gt;

&lt;p&gt;今回はMax/MSP/Jitter/Genのみを使ってIR測定ツールを作るということをしました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JitterとGenを活用してインパルス応答測定(2)</title>
      <link>https://matsuuratomoya.com/blog/2016-06-11/log_sinesweep_jitter_gen2/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-06-11/log_sinesweep_jitter_gen2/</guid>
      <description>&lt;p&gt;インパルス応答計測の方法の概略は&lt;a href=&#34;https://matsuuratomoya.com/blog/2016-06-11/log-sinsesweep-jitter-gen1/&#34;&gt;前回&lt;/a&gt;説明しました。
今回は実際にインパルス応答測定のためのパッチ制作を、実際にJitterとGenで作ったパッチの中身を見ながら解説していこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cycling74-MaxのPattrをちゃんと使い倒す</title>
      <link>https://matsuuratomoya.com/blog/2016-05-08/maxmsp_pattr/</link>
      <pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-05-08/maxmsp_pattr/</guid>
      <description>&lt;p&gt;Max/MSP使っていると困るのが&lt;strong&gt;パラメーターの管理&lt;/strong&gt;です。とりあえず適当にPresetで保存読み出ししておけばいいけど、テキストでも編集したいとなると古くから使われている&lt;strong&gt;coll&lt;/strong&gt;とかjsonで保存できる&lt;strong&gt;dict&lt;/strong&gt;とか、よくわからないpattrとかいろいろありすぎてわかりません。
今回は一番良くわからなそうなpattrを真面目に使ってみようという話です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github pagesで意地でもサブディレクトリをルートにする</title>
      <link>https://matsuuratomoya.com/blog/2016-05-07/githubpage-subdirectory/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-05-07/githubpage-subdirectory/</guid>
      <description>&lt;p&gt;このページ自体をGithub Pagesでホストしているのですが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソース自体もgithubで管理したい&lt;/li&gt;
&lt;li&gt;しかしリポジトリのルートからホスティングされるためbuildとかに入れてると例えば前者なら&lt;Githubのユーザー名&gt;.github.io/buildにアクセスしないといけない&lt;/li&gt;
&lt;li&gt;そうすると相対パスが狂ったりする&lt;/li&gt;
&lt;li&gt;公式でおすすめされてるJekyllはインソースビルドしてるがフォルダ構造が汚くなるのでやりたくない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などの問題があります。これをどうにか解決しようと頑張った。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Puredataで評価実験(サンプルパッチあり)</title>
      <link>https://matsuuratomoya.com/blog/2016-04-27/puredata_subjective/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://matsuuratomoya.com/blog/2016-04-27/puredata_subjective/</guid>
      <description>&lt;p&gt;微妙な需要ですが、Puredataはアルゴリズム作曲とか、シンセやエフェクター作ったりする以外にも（特に音を使う）主観評価実験に使うと便利だったりします。&lt;/p&gt;

&lt;p&gt;大体の実験で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DAWソフトとかでパラメーターごとの音刺激を作成&lt;/li&gt;
&lt;li&gt;iTunesとかのプレイリストに音刺激入れてランダム再生&lt;/li&gt;
&lt;li&gt;紙の解答用紙に記録してもらう&lt;/li&gt;
&lt;li&gt;出てきたデータをエクセルにひたすら入力(めんどくさい)&lt;/li&gt;
&lt;li&gt;エクセルからCSV書き出し&lt;/li&gt;
&lt;li&gt;Rとかでデータの解析&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という手順になったりするのですがこの内の&lt;strong&gt;iTunes、紙、エクセル&lt;/strong&gt;の部分をPuredataを使えば一つにまとめることが出来ます。&lt;/p&gt;

&lt;p&gt;当然実験内容によって作り方が変わるので万能のパッチは存在しないのですが、ある程度共通して使えるメソッドはあるのでここに書き記しておこうと思います。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>